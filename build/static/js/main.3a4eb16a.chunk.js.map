{"version":3,"sources":["images/twitch-background.jpg","components/UserLookup.js","components/LiveStreamInfo.js","components/OnlineStreams.js","components/OfflineStreamInfo.js","components/OfflineStreams.js","components/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","UserLookup","type","value","this","props","userName","onChange","onTextChange","React","Component","LiveStreamInfo","details","className","id","index","href","channel","url","src","preview","medium","alt","game","display_name","status","OnlineStreams","Object","keys","liveChannels","map","key","OfflineStreamInfo","video_banner","logo","OfflineStreams","offlineChannels","App","showAll","bind","showLive","showOffline","state","userLookup","onFormSubmit","streamsLookup","process","setState","axios","create","baseURL","headers","userId","channelList","streamPromises","kraken","getKraken","get","then","results","name","data","userDisplay","follows","forEach","response","_id","push","all","stream","channelId","exec","request","responseURL","e","preventDefault","users","length","target","data-toggle","data-placement","title","onSubmit","user","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3a4eb16a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/twitch-background.79cfbf22.jpg\";","import React from 'react';\n\nclass UserLookup extends React.Component {\n  render() {\n\n    return (\n     <input \n        type='text' \n        value={this.props.userName} \n        onChange={this.props.onTextChange}\n     />\n    )\n  }\n}\n\nexport default UserLookup;","import React from 'react';\n\nclass LiveStreamInfo extends React.Component {\n  render() {\n\n  \tconst {details} = this.props;\n\n    return (\n    \t<div className=\"card\" id={this.props.index}>\n\t\t\t  <a href={details.channel.url}>\n          <img src={details.preview.medium} className=\"img-fluid mx-auto rounded\" alt={this.props.index} />\n          <h6 className=\"card-img-overlay live-stream\">{details.game}</h6>\n          <h5 className=\"card-title live-stream\">{details.channel.display_name}</h5>\n        </a>\n        <div className=\"card-body d-flex align-items-center justify-content-center\">\n          <p className=\"card-text\">{details.channel.status}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default LiveStreamInfo;","import React from 'react';\nimport LiveStreamInfo from './LiveStreamInfo'\n\nclass OnlineStreams extends React.Component {\n  render() {\n    return (\n    \t<div className=\"row justify-content-center liveWrapper\">\n            {\n              Object\n              .keys(this.props.liveChannels)\n              .map(key => \n              \t\t<LiveStreamInfo\n                \t\tkey={key}\n                \t\tindex={key}\n                \t\tdetails={this.props.liveChannels[key]} \n                \t/>\n            \t)\n            }\n    \t</div>\n    )\n  }\n}\n\nexport default OnlineStreams;","import React from 'react';\nimport logo from '../images/twitch-background.jpg';\n\nclass OfflineStreamInfo extends React.Component {\n  render() {\n\n    const {details} = this.props;\n    if (details.video_banner === null) {\n      details.video_banner = logo;\n    }\n\n    return (\n      <div className=\"card\" id={this.props.index}>\n        <a href={details.url + '/videos'}>\n          <img src={details.video_banner} className=\"img-fluid mx-auto rounded\" alt={this.props.index} />\n          <h6 className=\"card-img-overlay offline-stream\">Offline</h6>          \n          <h5 className=\"card-title offline-stream\">{details.display_name}</h5>\n        </a>\n        <div className=\"card-body d-flex align-items-center justify-content-center\">\n          <p className=\"card-text\">{details.status}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default OfflineStreamInfo;","import React from 'react';\nimport OfflineStreamInfo from './OfflineStreamInfo'\n\nclass OfflineStreams extends React.Component {\n  render() {\n    return (\n    \t<div className=\"row justify-content-center offlineWrapper\">\n            {\n              Object\n              .keys(this.props.offlineChannels)\n              .map(key => \n                  <OfflineStreamInfo\n                    key={key}\n                    index={key}\n                    details={this.props.offlineChannels[key]}\n                  />\n              )\n            }\n    \t</div>\n    )\n  }\n}\n\nexport default OfflineStreams;","import React, { Component } from 'react';\nimport '../App.css';\nimport axios from 'axios';\n\nimport UserLookup from './UserLookup';\nimport OnlineStreams from './OnlineStreams';\nimport OfflineStreams from './OfflineStreams';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.showAll = this.showAll.bind(this);\n    this.showLive = this.showLive.bind(this);\n    this.showOffline = this.showOffline.bind(this);\n    this.state = {\n      userName: '',\n      userLookup: '',\n      liveChannels: {},\n      offlineChannels: {},\n      showLive: true,\n      showOffline: true,\n    }\n\n    this.onFormSubmit = this.onFormSubmit.bind(this)\n    this.onTextChange = this.onTextChange.bind(this)\n  }\n\n  componentWillMount() {\n    this.streamsLookup(process.env.REACT_APP_USER_ID);\n  }\n\n  showAll() {\n    this.setState({showLive: true, showOffline: true})\n  }\n\n  showLive() {\n    this.setState({showLive: true, showOffline: false})\n  }\n\n  showOffline() {\n    this.setState({showLive: false, showOffline: true})\n  }\n\n  getKraken() {\n    const kraken = axios.create({\n      baseURL: 'https://api.twitch.tv/kraken/',\n      headers: {\n        'Client-ID': process.env.REACT_APP_TWITCH_CLIENT_ID,\n        'Accept': 'application/vnd.twitchtv.v5+json'\n      }\n    });\n    return kraken;    \n  }\n\n  streamsLookup(userId) {\n    let liveChannels = {};\n    let offlineChannels = {};\n    let channelList = {};\n    let streamPromises = [];\n    let kraken = this.getKraken();\n\n    kraken.get('users/' + userId)\n    .then((results) => {\n      let name = results.data.display_name ? results.data.display_name : results.data.name;\n      this.setState({\n        userName: name,\n        userDisplay: 'User: ' + name \n      });\n    })\n    kraken.get('users/' + userId + '/follows/channels?sortby=last_broadcast&limit=100')\n    .then((results) => {\n      results.data.follows.forEach((response) => {\n        channelList[response.channel._id] = response.channel;\n        streamPromises.push(kraken.get('streams/' + response.channel._id));\n      });\n      return axios.all(streamPromises);\n    })\n    .then((results) => {\n      results.forEach((response) => {\n        if (response.data.stream !== null) {\n          liveChannels[response.data.stream.channel.name] = response.data.stream\n        } else {\n          var idRegExp = /(?<=streams\\/)\\d+/;\n          var channelId = idRegExp.exec(response.request.responseURL)[0];\n          let channel = channelList[channelId];\n          offlineChannels[channel.name] = channel;\n        }\n      });\n      this.setState({\n        liveChannels: liveChannels,\n        offlineChannels: offlineChannels\n      });\n    });\n  }\n\n  onFormSubmit(e) {\n    e.preventDefault()\n    let kraken = this.getKraken();\n    kraken.get('users?login=' + this.state.userLookup)\n    .then((results) => {\n      if (results.data.users.length !== 0) {\n        this.streamsLookup(results.data.users[0]._id);\n      } else {\n        this.setState({\n          userDisplay: 'User ' + this.state.userLookup + ' not found.'\n        });\n      }\n    });\n  }\n\n  onTextChange(e) {\n    this.setState({userLookup: e.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav id=\"primary-nav\" className=\"navbar navbar-default sticky-top\">\n          <div className=\"navbar-nav navbar-left\">\n            <a href=\"https://github.com/bramleyjl/twitch_follower\">\n              <h1 className=\"App-title\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"View on GitHub\">\n              Twitch Follower</h1>\n            </a>\n          </div>\n\n        <div className=\"navbar-nav\">\n          <form onSubmit={this.onFormSubmit}>\n            <span className=\"user-select\">{this.state.userDisplay}</span>\n            <UserLookup user={this.state.userName} onTextChange={this.onTextChange} />\n            <button type='submit'>Find User</button>\n          </form>\n        </div>\n\n        <div className=\"navbar-nav navbar-right\">\n            <button className={(this.state.showLive && this.state.showOffline) ? \"App-subtitle-selected\" : \"App-subtitle\"} onClick={this.showAll}>All</button>\n            <button className={(this.state.showLive && !this.state.showOffline) ? \"App-subtitle-selected\" : \"App-subtitle\"} onClick={this.showLive}>Live</button>\n            <button className={(!this.state.showLive && this.state.showOffline) ? \"App-subtitle-selected\" : \"App-subtitle\"} onClick={this.showOffline}>Offline</button>\n          </div>\n        </nav>\n        <div className=\"container\">\n          { this.state.showLive ? <OnlineStreams liveChannels={this.state.liveChannels} /> : null }\n          { this.state.showOffline ? <OfflineStreams offlineChannels={this.state.offlineChannels} /> : null }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//Include bootstrap's css \nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css';\n//Include bootstrap's js\nimport './../node_modules/bootstrap/dist/js/bootstrap.min.js';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}